<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2rayclashnode.github.io/news/article-32312.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Java基础知识 29（同步代码块，同步方法，静态同步方法，Lock锁，死锁问题）</title>
        <meta name="description" content="Java基础知识 29  先回顾一下上节课讲的多个窗口共同卖票的问题，首先我们设置三个不同的线程来同步进行卖票，我们把所有的票数全部设置成静态变量，让这三个线程可以共享这些票。通过设置这个静态变量我们" />
        <link rel="icon" href="/assets/website/img/v2rayclashnode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/v2rayclashnode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2rayclashnode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2rayclashnode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2rayclashnode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2rayclashnode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/v2rayclashnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Y4BEYC2CJF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Y4BEYC2CJF');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top">
        <div class="container d-flex align-items-center justify-content-between">
                        <span class="logo"><a href="/">V2ray Clash Node</a></span>
                        <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="row">
                        <h1>Java基础知识 29（同步代码块，同步方法，静态同步方法，Lock锁，死锁问题）</h1>
                    </div>
                </div>
            </div>
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2> <a id="Java_29_0" rel="nofollow"></a>Java基础知识 29</h2> <p> 先回顾一下上节课讲的多个窗口共同卖票的问题，首先我们设置三个不同的线程来同步进行卖票，我们把所有的票数全部设置成静态变量，让这三个线程可以共享这些票。通过设置这个静态变量我们实现了三个窗口共同卖票的问题。但是现实生活中我们打开APP买票时，通常会有广告出现，这些就是线程睡眠的结果。这个线程睡眠可能就会导致共享出现问题，可能会出现0票，甚至还有-1票的问题。那么这是什么原因呢？其实这是由于三个线程之间是抢夺式调度模型，当有一个线程进入了子线程准备购票的时候，这个时候线程中只有1张票了；另一个线程也开始了进入线程准备购票，由于第一个线程进入以后还没有来得及将票数减1，第二个线程已经完成了所有操作，这个时候就会出现0票的情况，而第三个线程又抢先一步于第一个线程完成所有的操作，那么就会出现0票的情况。所以接下我们要研究的是如何解决这个问题？</p> <p>（1）出现了0张票或负数票的问题，原因：这是由于<strong>线程的随机性</strong>导致的。</p> <p>（2）出现了相同的票数，原因：这是由于<strong>线程的原子性</strong>导致的。</p> <p>原子性问题（不可分割性） 线程对（piao–不是一个原子性操作，他要对票这个变量进行读改写三个操作）</p> <p>出现线程安全问题符合三个条件：</p> <p>（1）是否为多线程环境</p> <p>（2）多个线程之间有没有共享数据</p> <p>（3）有没有多条语句在操作这个共享变量piao–</p> <p><strong>对于数据安全的问题，我们把有可能出现数据安全问题的代码使用同步代码块进行包裹。</strong></p> <h4> <a id="_20" rel="nofollow"></a>同步代码块</h4> <p>synchronized（对象）{<!-- --></p> <p> 放你认为有可能出现问题的代码；</p> <p>}</p> <p>锁：你可以用Java里面的任意一个对象来充当锁，多个线程要共享一把锁才能锁住。</p> <p>这个<strong>同步代码块能够保证数据的安全性的一个主要原因是这个对象要被定义成静态成员变量，才能被所有线程共享。需要这个对象被所有的线程所共享，这个对象其实就是一把锁，这个对象习惯叫作监视器。</strong></p> <p><strong>同步代码块的好处</strong>：同步的出现解决了多线程的安全问题。</p> <p><strong>同步代码块的弊端</strong>：当线程相当多时，因为每一个线程都会区判断同步上的锁，很耗费资源，无形中会降低程序的运行效率。</p> <pre><code>public class Mytest {     public static void main(String[] args) {         CellRunnable cellRunnable = new CellRunnable();         Thread thread1 = new Thread(cellRunnable, "窗口1：");         Thread thread2 = new Thread(cellRunnable, "窗口2：");         Thread thread3 = new Thread(cellRunnable, "窗口3：");         thread1.start();         thread2.start();         thread3.start();     } } ---------------------------------- public class CellRunnable implements Runnable{     //这些票让三个线程共享     static int piao=100;     //确保这个锁对象只有一个，多个线程共用一把锁     static Object obj=new Object();     @Override     public void run() {         while (true){             synchronized (obj){                 //当线程1进来同步代码块后，就持有了这个锁，其他线程没有持有锁，那么就处于等待状态，等待在同步代码块的外面。                 if (piao&gt;=1){                     try {                         Thread.sleep(50);                     } catch (InterruptedException e) {                         e.printStackTrace();                     }                     System.out.println(Thread.currentThread().getName()+"正在出售第："+(piao--)+"张票");                 }             }             //执行完了，出了同步代码块，就会释放锁。释放锁了之后，多个线程再去争抢CPU的时间片         }     } } </code></pre> <h4> <a id="_74" rel="nofollow"></a>同步方法</h4> <p><strong>我们可以把一个方法用synchronized这个关键字修饰，来封装一段代码解决线程安全问题。</strong></p> <p><strong>同步方法使用的锁对象是this（隐含对象）。</strong></p> <pre><code>public class Mytest {     public static void main(String[] args) {         CellRunnable cellRunnable = new CellRunnable();         Thread thread1 = new Thread(cellRunnable, "窗口1：");         Thread thread2 = new Thread(cellRunnable, "窗口2：");         Thread thread3 = new Thread(cellRunnable, "窗口3：");         thread1.start();         thread2.start();         thread3.start();     } } ---------------------------------- public class CellRunnable implements Runnable{     //这些票让三个线程共享     static int piao=100;     //确保这个锁对象只有一个，多个线程共用一把锁     static Object obj=new Object();     int i=1;     @Override     public void run() {         while (true){             if (i%2==0){                 //由于同步方法的锁对象默认是this，同步代码块和同步方法使用的锁不是同一个锁，                 // 因为我们要将其改成同一个锁对象。                 synchronized (this){                     //当线程1进来同步代码块后，就持有了这个锁，其他线程没有持有锁，那么就处于等待状态，等待在同步代码块的外面。                     if (piao&gt;=1){                         try {                             Thread.sleep(50);                         } catch (InterruptedException e) {                             e.printStackTrace();                         }                         System.out.println(Thread.currentThread().getName()+"正在出售第："+(piao--)+"张票");                     }                 }             }else {                 maipiao();             }             i++;         }     }     //同步方法：我们可以把一个方法用synchronized这个关键字来修饰，来封装一段代码，解决线程安全问题，     //同步方法默认使用的锁对象就是this     //同步方法使用的锁对象是this，和上面的锁使用的对象不一致，因此我们要将上面的锁对象改为this     private synchronized void maipiao() {         if (piao &gt;= 1) {             try {                 Thread.sleep(50);             } catch (InterruptedException e) {                 e.printStackTrace();             }             System.out.println(Thread.currentThread().getName() + "正在出售第：" + (piao--) + "张票");         }     } } </code></pre> <h4> <a id="_138" rel="nofollow"></a>静态同步方法</h4> <p><strong>静态同步方法的锁对象是当前类的字节码对象。</strong></p> <pre><code>public class Mytest {     public static void main(String[] args) {         CellRunnable cellRunnable = new CellRunnable();         Thread thread1 = new Thread(cellRunnable, "窗口1：");         Thread thread2 = new Thread(cellRunnable, "窗口2：");         Thread thread3 = new Thread(cellRunnable, "窗口3：");         thread1.start();         thread2.start();         thread3.start();     } } ---------------------------------------- public class CellRunnable implements Runnable{     //这些票让三个线程共享     static int piao=100;     //确保这个锁对象只有一个，多个线程共用一把锁     private final static Object obj=new Object();     int i=1;     @Override     public void run() {         while (true){             if (i%2==0){                 //由于静态同步方法和同步代码块使用的锁对象不是同一个锁对象，                 // 因为我们要将同步代码块的锁对象修改成当前类的字节码对象。                 synchronized (CellRunnable.class){                     //当线程1进来同步代码块后，就持有了这个锁，其他线程没有持有锁，那么就处于等待状态，等待在同步代码块的外面。                     if (piao&gt;=1){                         try {                             Thread.sleep(50);                         } catch (InterruptedException e) {                             e.printStackTrace();                         }                         System.out.println(Thread.currentThread().getName()+"正在出售第："+(piao--)+"张票");                     }                 }                 //执行完了，出了同步代码块，就会释放锁。释放锁了之后，多个线程再去争抢CPU的时间片             }else {                 maiPiao();             }         }     }     //同步方法：我们可以把一个方法用synchronized这个关键字修饰，来封装一段代码，解决线程安全的问题。     //静态同步方法：默认使用的锁对象，是当前类的字节码对象。     private static synchronized void maiPiao() {         if (piao &gt;= 1) {             try {                 Thread.sleep(50);             } catch (InterruptedException e) {                 e.printStackTrace();             }             System.out.println(Thread.currentThread().getName() + "正在出售第：" + (piao--) + "张票");         }     } } </code></pre> <h4> <a id="Lock_199" rel="nofollow"></a>Lock锁的概述及使用</h4> <p><strong>lock.lock(); lock.unlock();</strong></p> <pre><code>public class Mytest {     public static void main(String[] args) {         CellRunnable cellRunnable = new CellRunnable();         Thread thread1 = new Thread(cellRunnable, "窗口1：");         Thread thread2 = new Thread(cellRunnable, "窗口2：");         Thread thread3 = new Thread(cellRunnable, "窗口3：");         thread1.start();         thread2.start();         thread3.start();     } } ------------------------------------- public class CellRunnable implements Runnable{     //这些票三个线程共享     static int piao=100;     private final static ReentrantLock lock=new ReentrantLock();     @Override     public void run() {         while (true){             //th1  th2  th3 加锁             lock.lock();             try {                 if (piao&gt;=1){                     try {                         Thread.sleep(50);                         System.out.println(Thread.currentThread().getName()+"正在出售第："+(piao--)+"张票");                     } catch (InterruptedException e) {                         e.printStackTrace();                     }                 }             } catch (Exception e) {                 e.printStackTrace();             } finally {                 lock.unlock();//解锁             }         }     } } </code></pre> <h4> <a id="_244" rel="nofollow"></a>死锁问题概述及使用</h4> <p>如果<strong>出现了同步嵌套，就容易出现死锁问题，指的是两个或者两个以上的线程在执行的过程中，因争夺资源而产生的一种互相等待的现象。</strong></p> <pre><code>public class Mytest {     public static void main(String[] args) throws InterruptedException {         MyThread th1 = new MyThread(true);         MyThread th2 = new MyThread(false);         th1.start();         Thread.sleep(50);         th2.start();     } } ----------------------------------------- public class MyThread extends Thread{     //标记     boolean flag;     public MyThread(boolean flag) {         this.flag = flag;     }     @Override     public void run() {         if (flag){             synchronized (ObjectUtils.objA){                 System.out.println("true  线程持有了objA锁，进来执行了AAA");                 synchronized (ObjectUtils.objB){                     System.out.println("true  线程持有了objB锁，进来执行了BBB");                 }             }         }else {             synchronized (ObjectUtils.objB){                 System.out.println("false  线程持有了objB锁，进来执行了BBB");                 synchronized (ObjectUtils.objA){                     System.out.println("false  线程持有了objA锁，进来执行了AAA");                 }             }         }     } } -------------------------------------- public interface ObjectUtils {     //创建两个对象，来充当两把锁对象     public static final Object objA=new Object();     public static final Object objB=new Object(); } </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-31832.htm">猫进屋十大预兆 猫进屋十大预兆黑色猫</a></p>
                                        <p>下一个：<a href="/news/article-32313.htm">Springboot过滤器和拦截器的区别</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-7-24-clash-v2ray-ss-ssr.htm" title="「7月24日」最高速度19.9M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「7月24日」最高速度19.9M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-6-16-free-clash.htm" title="「6月16日」最高速度22.5M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接">「6月16日」最高速度22.5M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-7-clash-windows.htm" title="「9月7日」最高速度23M/S，2024年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅链接">「9月7日」最高速度23M/S，2024年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-29-free-clash.htm" title="「8月29日」最高速度22.9M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费节点订阅链接">「8月29日」最高速度22.9M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-25-free-subscribe-node.htm" title="「10月25日」最高速度18.7M/S，2024年SSR/V2ray/Shadowrocket/Clash每天更新免费节点订阅链接">「10月25日」最高速度18.7M/S，2024年SSR/V2ray/Shadowrocket/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-24-free-v2ray.htm" title="「10月24日」最高速度21.5M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「10月24日」最高速度21.5M/S，2024年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-26-clash-node-daily-updates.htm" title="「10月26日」最高速度18.3M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「10月26日」最高速度18.3M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-15-free-node-subscribe.htm" title="「11月15日」最高速度18.4M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「11月15日」最高速度18.4M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-7-clash-node.htm" title="「7月7日」最高速度20.7M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费节点订阅链接">「7月7日」最高速度20.7M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24807.htm" title="Goland proto文件 File Watch 自动生成">Goland proto文件 File Watch 自动生成</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">1</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container footer-bottom clearfix">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                V2rayClashNode节点订阅站 版权所有
                <br />
                Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/v2rayclashnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/v2rayclashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>