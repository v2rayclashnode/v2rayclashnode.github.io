<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2rayclashnode.github.io/news/article-42540.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Java NIO 选择器 Selector_在线工具</title>
        <meta name="description" content="选择器 Selector 是 I/O 多路复用模型的核心组件，它可以监控实现了 SelectableChannel 接口的通道的就绪情况。基于多路复用(multiplexing) I/O 模型，单线程" />
        <link rel="icon" href="/assets/website/img/v2rayclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="V2rayClashNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2rayclashnode.github.io/news/article-42540.htm" />
    <meta property="og:site_name" content="V2rayClashNode节点订阅站" />
    <meta property="og:title" content="Java NIO 选择器 Selector_在线工具" />
    <meta property="og:image" content="https://v2rayclashnode.github.io/uploads/20240531/3c11e83fd5bb3a9d1c0665eff5c49ee7.webp" />
        <meta property="og:release_date" content="2025-01-18T07:15:16" />
    <meta property="og:updated_time" content="2025-01-18T07:15:16" />
        <meta property="og:description" content="选择器 Selector 是 I/O 多路复用模型的核心组件，它可以监控实现了 SelectableChannel 接口的通道的就绪情况。基于多路复用(multiplexing) I/O 模型，单线程" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java NIO 选择器 Selector_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/v2rayclashnode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/v2rayclashnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Y4BEYC2CJF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Y4BEYC2CJF');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top">
        <div class="container d-flex align-items-center justify-content-between">
                        <span class="logo"><a href="/">V2ray Clash Node</a></span>
                        <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="row">
                        <h1>Java NIO 选择器 Selector_在线工具</h1>
                    </div>
                </div>
            </div>
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>选择器 Selector 是 I/O 多路复用模型的核心组件，它可以监控实现了 SelectableChannel 接口的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/robothy/p/14234437.html"  target="_blank"  rel="nofollow">通道</a>的就绪情况。基于多路复用(multiplexing) I/O 模型，单线程的 Java 程序能够处理数万个连接，极大提高了系统的并发数。</p> <h2 id="1-多路复用-io-模型">1. 多路复用 I/O 模型</h2> <p>I/O 多路复用模型是操作系统提供给应用程序的一种进行 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.cs.toronto.edu/~krueger/csc209h/f05/lectures/Week11-Select.pdf"  target="_blank"  rel="nofollow">I/O 操作的模型</a>。应用程序通过 select/poll 系统调用监控多个 I/O 设备，一旦某个或者多个 I/O 设备的处于就绪状态（例如：可读）则返回，应用程序随后可对就绪的设备进行操作。</p> <p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns="http://www.w3.org/2000/svg" width="683" height="376" viewbox="0 0 683 376"></p> <style type="text/css"> .st22 {fill:#191919;font-family:Times New Roman;font-size:10pt} .st11 {fill:#191919;font-family:Times New Roman;font-size:13pt;font-weight:bold} .st33 {font-family:Arial;font-size:10pt} </style> <p><defs></defs><g transform="translate(5,5)" id="page2"><rect width="673" height="366" y="0" stroke="#808080" x="0" fill="#ffffff"></rect><g transform="translate(118,39)" id="shape1"><text class="st11"><tspan y="25.4" x="36.8">应用程序</tspan></text></g><g transform="translate(383,39)" id="shape2"><text class="st11"><tspan y="25.4" x="55.2">内核</tspan></text></g><path transform="matrix(-1,0,0,1,151,115)" d="M0,0L9,0C11.5,-0.4,14,.5,15.8,2.2C17.5,4,18.4,6.5,18,9L18,38C17.6,40.5,18.5,43,20.2,44.8C22,46.5,24.5,47.4,27,47C24.5,46.6,22,47.5,20.2,49.2C18.5,51,17.6,53.5,18,56L18,85C18.4,87.5,17.5,90,15.8,91.8C14,93.5,11.5,94.4,9,94L0,94" stroke="#323232" id="shape3" fill="none"></path><g transform="translate(153.5,101)" id="shape4"><text class="st22"><tspan y="18" x="21.6">select</tspan></text></g><g transform="translate(395,99.5)" id="shape5"><text class="st22"><tspan y="19.9" x="20.8">数据未准备好</tspan></text></g><g transform="translate(39,147.5)" id="shape6"><text class="st22"><tspan y="18.9" x="10.4">阻塞等待</tspan></text></g><path transform="translate(521,115)" d="M0,0L9,0C11.5,-0.4,14,.5,15.8,2.2C17.5,4,18.4,6.5,18,9L18,38C17.6,40.5,18.5,43,20.2,44.8C22,46.5,24.5,47.4,27,47C24.5,46.6,22,47.5,20.2,49.2C18.5,51,17.6,53.5,18,56L18,85C18.4,87.5,17.5,90,15.8,91.8C14,93.5,11.5,94.4,9,94L0,94" stroke="#323232" id="shape7" fill="none"></path><g transform="translate(556.5,148.5)" id="shape8"><text class="st22"><tspan y="18.4" x="11.4">等待数据</tspan></text></g><g transform="translate(395,199)" id="shape9"><text class="st22"><tspan y="21.4" x="20.8">数据已准备好</tspan></text></g><g transform="translate(395,293)" id="shape10"><text class="st22"><tspan y="21.4" x="34.4">复制完成</tspan></text></g><path transform="translate(521,215)" d="M0,0L9,0C11.5,-0.4,14,.5,15.8,2.2C17.5,4,18.4,6.5,18,9L18,38C17.6,40.5,18.5,43,20.2,44.8C22,46.5,24.5,47.4,27,47C24.5,46.6,22,47.5,20.2,49.2C18.5,51,17.6,53.5,18,56L18,85C18.4,87.5,17.5,90,15.8,91.8C14,93.5,11.5,94.4,9,94L0,94" stroke="#323232" id="shape11" fill="none"></path><g transform="translate(556.5,235)" id="shape12"><text class="st22"><tspan y="23" x="5">复制数据到</tspan><tspan y="39.8" x="11.4">用户空间</tspan></text></g><path transform="matrix(-1,0,0,1,151,215)" d="M0,0L9,0C11.5,-0.4,14,.5,15.8,2.2C17.5,4,18.4,6.5,18,9L18,38C17.6,40.5,18.5,43,20.2,44.8C22,46.5,24.5,47.4,27,47C24.5,46.6,22,47.5,20.2,49.2C18.5,51,17.6,53.5,18,56L18,85C18.4,87.5,17.5,90,15.8,91.8C14,93.5,11.5,94.4,9,94L0,94" stroke="#323232" id="shape13" fill="none"></path><g transform="translate(153.5,199)" id="shape14"><text class="st22"><tspan y="18" x="26.4">read</tspan></text></g><g transform="translate(133,293)" id="shape15"><text class="st22"><tspan y="21.4" x="34.4">处理数据</tspan></text></g><g transform="translate(39,247.5)" id="shape16"><text class="st22"><tspan y="18.9" x="10.4">阻塞等待</tspan></text></g><g transform="translate(228,115)" id="shape17"><path d="M0,0L165.6,0" stroke="#323232" fill="none"></path><path stroke-width="1" d="M170,0L164.8,-3C165.3,-2.1,165.6,-1.1,165.6,0C165.6,1.1,165.3,2.1,164.8,3L170,0" stroke="#323232" stroke-linecap="round" fill="#323232"></path><rect width="55.6" height="16.8" y="-22.4" x="57.8" fill="#ffffff"></rect><text class="st33"><tspan y="-9.6" x="57.7">系统调用</tspan></text></g><g transform="translate(398,204)" id="shape18"><path d="M0,0L-165.6,0" stroke="#323232" fill="none"></path><path stroke-width="1" d="M-170,0L-164.8,3C-165.3,2.1,-165.6,1.1,-165.6,0C-165.6,-1.1,-165.3,-2.1,-164.8,-3L-170,0" stroke="#323232" stroke-linecap="round" fill="#323232"></path><rect width="55.6" height="16.8" y="-22.4" x="-111.4" fill="#ffffff"></rect><text class="st33"><tspan y="-9.6" x="-111.5">返回可读</tspan></text></g><g transform="translate(229.5,227)" id="shape19"><path d="M0,0L164.1,0" stroke="#323232" fill="none"></path><path stroke-width="1" d="M168.5,0L163.3,-3C163.8,-2.1,164.1,-1.1,164.1,0C164.1,1.1,163.8,2.1,163.3,3L168.5,0" stroke="#323232" stroke-linecap="round" fill="#323232"></path><rect width="55.6" height="16.8" y="5.6" x="59.5" fill="#ffffff"></rect><text class="st33"><tspan y="18.4" x="59.4">系统调用</tspan></text></g><g transform="translate(398,308)" id="shape20"><path d="M0,0L-161.6,0" stroke="#323232" fill="none"></path><path stroke-width="1" d="M-166,0L-160.8,3C-161.3,2.1,-161.6,1.1,-161.6,0C-161.6,-1.1,-161.3,-2.1,-160.8,-3L-166,0" stroke="#323232" stroke-linecap="round" fill="#323232"></path><rect width="50.7" height="16.8" y="-22.4" x="-106.6" fill="#ffffff"></rect><text class="st33"><tspan y="-9.6" x="-106.7">返回 OK</tspan></text></g><g transform="translate(454,129)" id="shape21"><path d="M0,0L0,61.6" stroke="#323232" fill="none"></path><path stroke-width="1" d="M0,66L3,60.8C2.1,61.3,1.1,61.6,0,61.6C-1.1,61.6,-2.1,61.3,-3,60.8L0,66" stroke="#323232" stroke-linecap="round" fill="#323232"></path></g><g transform="translate(454,228)" id="shape22"><path d="M0,0L0,61.6" stroke="#323232" fill="none"></path><path stroke-width="1" d="M0,66L3,60.8C2.1,61.3,1.1,61.6,0,61.6C-1.1,61.6,-2.1,61.3,-3,60.8L0,66" stroke="#323232" stroke-linecap="round" fill="#323232"></path></g></g></svg></p> <p>大致流程如下：</p> <p>1）应用程序向内核发起 select 系统调用，该调用会阻塞应用程序。</p> <p>2）内核等待数据到达。数据可能由 DMA 复制到内核缓冲区，也有可能是 CPU 进行复制。</p> <p>3）数据准备完毕，select 调用返回。select 返回的是一个集和，可能有多个连接都已经就绪。</p> <p>4）应用程序发起 read 系统调用。</p> <p>5）操作系统将数据有内核缓冲区复制到用户缓冲区。</p> <p>6）read 调用返回。</p> <p>I/O 多路复用模型本质上是一种阻塞 I/O，进行读操作的 read 系统调用是阻塞的，select 的时候也是阻塞的。不过 I/O 多路复用模型的优势在于阻塞时可以等待多路 I/O 就绪，然后一并处理。与多线程处理多路 I/O 相比，它是单线程的，没有线程切换的开销，单位时间内能够处理多的连接数。</p> <h2 id="2-选择器与通道关系">2. 选择器与通道关系</h2> <p>在 Java 中，通道 Channel 可以表示 I/O 连接，而选择器可以监控某些 I/O 事件就绪的通道，选择通道中就绪的 I/O 事件。这里的通道必须是实现了 SelectableChannel 接口的通道，例如：SocketChannel, DatagramChannel 等；而文件通道 FileChannel 没有实现该接口，所以不支持选择器。</p> <p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns="http://www.w3.org/2000/svg" width="400" height="356" viewbox="0 0 400 356"></p> <style type="text/css"> .st1 {fill:#191919;font-family:Times New Roman;font-size:9pt} .st2 {font-family:Microsoft YaHei UI} </style> <p><defs></defs><g transform="translate(5,5)" id="page1"><rect width="390" height="346" y="0" stroke="#808080" x="0" fill="#ffffff"></rect><g transform="translate(39,154)" id="shape1"><path d="M20,50L80,50L100,25L80,0L20,0L0,25L20,50z" stroke="#323232" fill="#ebc4db" fill-rule="evenodd"></path><text class="st1"><tspan y="20.6" x="30.8">Selector</tspan><tspan y="35.8" x="32.4">选择器</tspan></text></g><g transform="translate(210.26,39)" id="shape2"><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0z" fill="#cfebf6" fill-rule="evenodd"></path><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0zM134.7,0C131.4,0,128.7,10.7,128.7,24C128.7,37.3,131.4,48,134.7,48" stroke="#323232" fill="none"></path><text class="st1"><tspan y="20.4" x="13.6" class="st2">SelectableChannel</tspan><tspan y="35.6" x="37.6">可选择通道</tspan></text></g><g transform="translate(139,179)" id="shape3"><path d="M0,0L39.3,0L39.3,-116L66.9,-116" stroke="#323232" fill="none"></path><path stroke-width="1" d="M71.3,-116L66.1,-119C66.6,-118.1,66.9,-117.1,66.9,-116C66.9,-114.9,66.6,-113.9,66.1,-113L71.3,-116" stroke="#323232" stroke-linecap="round" fill="#323232"></path></g><g transform="translate(139,179)" id="shape4"><path d="M0,0L39.3,0L39.3,-38L66.9,-38" stroke="#323232" fill="none"></path><path stroke-width="1" d="M71.3,-38L66.1,-41C66.6,-40.1,66.9,-39.1,66.9,-38C66.9,-36.9,66.6,-35.9,66.1,-35L71.3,-38" stroke="#323232" stroke-linecap="round" fill="#323232"></path></g><g transform="translate(139,179)" id="shape5"><path d="M0,0L39.3,0L39.3,33L66.9,33" stroke="#323232" fill="none"></path><path stroke-width="1" d="M71.3,33L66.1,30C66.6,30.9,66.9,31.9,66.9,33C66.9,34.1,66.6,35.1,66.1,36L71.3,33" stroke="#323232" stroke-linecap="round" fill="#323232"></path></g><g transform="translate(139,179)" id="shape6"><path d="M0,0L39.3,0L39.3,104L66.9,104" stroke="#323232" fill="none"></path><path stroke-width="1" d="M71.3,104L66.1,101C66.6,101.9,66.9,102.9,66.9,104C66.9,105.1,66.6,106.1,66.1,107L71.3,104" stroke="#323232" stroke-linecap="round" fill="#323232"></path></g><g transform="translate(210.26,117)" id="shape7"><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0z" fill="#cfebf6" fill-rule="evenodd"></path><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0zM134.7,0C131.4,0,128.7,10.7,128.7,24C128.7,37.3,131.4,48,134.7,48" stroke="#323232" fill="none"></path><text class="st1"><tspan y="20.4" x="13.6" class="st2">SelectableChannel</tspan><tspan y="35.6" x="37.6">可选择通道</tspan></text></g><g transform="translate(210.26,188)" id="shape8"><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0z" fill="#cfebf6" fill-rule="evenodd"></path><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0zM134.7,0C131.4,0,128.7,10.7,128.7,24C128.7,37.3,131.4,48,134.7,48" stroke="#323232" fill="none"></path><text class="st1"><tspan y="20.4" x="13.6" class="st2">SelectableChannel</tspan><tspan y="35.6" x="37.6">可选择通道</tspan></text></g><g transform="translate(210.26,259)" id="shape9"><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0z" fill="#cfebf6" fill-rule="evenodd"></path><path d="M6,0L134.7,0L134.7,0C138.1,0,140.7,10.7,140.7,24C140.7,37.3,138.1,48,134.7,48L6,48L6,48C2.7,48,0,37.3,0,24C0,10.7,2.7,0,6,0zM134.7,0C131.4,0,128.7,10.7,128.7,24C128.7,37.3,131.4,48,134.7,48" stroke="#323232" fill="none"></path><text class="st1"><tspan y="20.4" x="13.6" class="st2">SelectableChannel</tspan><tspan y="35.6" x="37.6">可选择通道</tspan></text></g></g></svg></p> <h2 id="3-选择键-selectionkey">3. 选择键 SelectionKey</h2> <p>选择器 Selector 监控通道时监控的是通道中的事件，选择键 SelectionKey 就代表着 I/O 事件。程序通过调用 Selector.select() 方法来选中选择器所监控的通道中的就绪的 I/O 事件的集合，然后遍历集合，对事件作出相应的处理。</p> <p>选择键 SelectionKey 可以表示 4 种事件，这 4 种事件使用 int 类型的常量来表示。</p> <p>1）SelectionKey.OP_ACCEPT 表示 accept 事件就绪。例如：对于 ServerSocketChannel 来说，该事件就绪表示可以调用 accept() 方法来获得与客户端连接的通道 SocketChannel。</p> <p>2）SelectionKey.OP_CONNECT 表示客户端与服务端连接成功。</p> <p>3）SelectionKey.OP_READ 表示通道中已经有了可读数据，可以调用 read() 方法从通道中读取数据。</p> <p>4）SelectionKey.OP_WRITE 表示写事件就绪，可以调用 write() 方法往通道中写入数据。</p> <p>不同的通道所能够支持的 I/O 事件不同，例如：ServerSocketChannel 只支持 accept 事件，而 DatagramChannel 只支持 read 和 write 事件。要查看通道所支持的事件，可以查看通道的 javadoc 文档，或者调用通道的 validOps() 方法来进行判断。例如：channel.validOps() &amp; SelectionKey.OP_READ &gt; 0 表示 channel 支持读事件。</p> <h2 id="4-选择器使用步骤">4. 选择器使用步骤</h2> <h3 id="41-获取选择器">4.1 获取选择器</h3> <p>与通道和缓冲区的获取类似，选择器的获取也是通过静态工厂方法 open() 来得到的。</p> <pre><code class="language-java">Selector selector = Selector.open();    // 获取一个选择器实例 </code></pre> <h3 id="42-获取可选择通道">4.2 获取可选择通道</h3> <p>能够被选择器监控的通道必须实现了 SelectableChannel 接口，并且需要将通道配置成非阻塞模式，否则后续的注册步骤会抛出 IllegalBlockingModeException。</p> <pre><code class="language-java">SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("localhost", 9090)); // 打开 SocketChannel 并连接到本机 9090 端口 socketChannel.configureBlocking(false); // 配置通道为非阻塞模式 </code></pre> <h3 id="43-将通道注册到选择器">4.3 将通道注册到选择器</h3> <p>通道在被指定的选择器监控之前，应该先告诉选择器，并且告知监控的事件，即：将通道注册到选择器。</p> <p>通道的注册通过 SelectableChannel.register(Selector selector, int ops) 来完成，ops 表示关注的事件，如果需要关注该通道的多个 I/O 事件，可以传入这些事件类型或运算之后的结果。这些事件必须是通道所支持的，否则抛出 IllegalArgumentException。</p> <pre><code class="language-java">socketChannel.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);   // 将套接字通过到注册到选择器，关注 read 和 write 事件 </code></pre> <h3 id="44-轮询-select-就绪事件">4.4 轮询 select 就绪事件</h3> <p>通过调用选择器的 Selector.select() 方法可以获取就绪事件，该方法会将就绪事件放到一个 SelectionKey 集合中，然后返回就绪的事件的个数。这个方法映射多路复用 I/O 模型中的 select 系统调用，它是一个阻塞方法。正常情况下，直到至少有一个就绪事件，或者其它线程调用了当前 Selector 对象的 wakeup() 方法，或者当前线程被中断时返回。</p> <pre><code class="language-java">while (selector.select() &gt; 0){ // 轮询，且返回时有就绪事件     Set&lt;SelectionKey&gt; keys = selector.selectedKeys(); // 获取就绪事件集合     ....... } </code></pre> <p>有 3 种方式可以 select 就绪事件：</p> <p>1）select() 阻塞方法，有一个就绪事件，或者其它线程调用了 wakeup() 或者当前线程被中断时返回。</p> <p>2）select(long timeout) 阻塞方法，有一个就绪事件，或者其它线程调用了 wakeup()，或者当前线程被中断，或者阻塞时长达到了 timeout 时返回。不抛出超时异常。</p> <p>3）selectNode() 不阻塞，如果无就绪事件，则返回 0；如果有就绪事件，则将就绪事件放到一个集合，返回就绪事件的数量。</p> <h3 id="45-处理就绪事件">4.5 处理就绪事件</h3> <p>每次可以 select 出一批就绪的事件，所以需要对这些事件进行迭代。从一个 SelectionKey 对象可以得到：1）就绪事件的对应的通道；2）就绪的事件。通过这些信息，就可以很方便地进行 I/O 操作。</p> <pre><code class="language-java">for(SelectionKey key : keys){     if(key.isWritable()){ // 可写事件         if("Bye".equals( (line = scanner.nextLine()) )){             socketChannel.shutdownOutput();             socketChannel.close();             break;         }         buf.put(line.getBytes());         buf.flip();         socketChannel.write(buf);         buf.compact();     } } keys.clear(); // 清除选择键（事件）集，避免下次循环的时候重复处理。 </code></pre> <p>需要注意的是，处理完 I/O 事件之后，需要清除选择键集合，避免下一轮循环的时候对同一事件重复处理。</p> <h2 id="5-完整示例">5. 完整示例</h2> <p>下面给出一个完整的实例，实例中包含 TCP 客户端 TcpClient, UDP 客户端 UdpClient 和服务端 EchoServer。服务端 EchoServer 可以同时处理 UDP 请求和 TCP 请求，用户可以在客户端控制台输入内容，按回车发送给服务端，服务端打印客户端发送过来的内容。完整代码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/Robothy/java-experiments/tree/main/nio/Selector"  target="_blank"  rel="nofollow">https://github.com/Robothy/java-experiments/tree/main/nio/Selector</a></p> <h3 id="51-服务端">5.1 服务端</h3> <pre><code class="language-java">public class EchoServer {      public static void main(String[] args) throws IOException {          Selector selector = Selector.open();    // 获取选择器          ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); // 打开服务器通道         serverSocketChannel.configureBlocking(false);                         // 服务器通道配置为非阻塞模式         serverSocketChannel.bind(new InetSocketAddress(9090));           // 绑定 TCP 端口 9090         serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);       // 将服务器通道注册到选择器 selector 中，注册事件为 ACCEPT          DatagramChannel datagramChannel = DatagramChannel.open();             // 打开套接字通道         datagramChannel.configureBlocking(false);                             // 配置通道为非阻塞模式         datagramChannel.bind(new InetSocketAddress(9090));               // 绑定 UDP 端口 9090         datagramChannel.register(selector, SelectionKey.OP_READ);             // 将通道注册到选择器 selector 中，注册事件为读取数据          ByteBuffer buf = ByteBuffer.allocate(1024);                           // 分配一个 1024 字节的堆字节缓冲区          while (selector.select() &gt; 0){                                        // 轮询已经就绪的注册的通道的 I/O 事件             Set&lt;SelectionKey&gt; keys = selector.selectedKeys();                 // 获取就绪的 I/O 事件，即选择器键集合             for (SelectionKey key : keys){                                    // 遍历选择键，处理就绪事件                 if(key.isAcceptable()){                                       // 选择键的事件的是 I/O 连接事件                     SocketChannel socketChannel = serverSocketChannel.accept(); // 执行 I/O 操作，获取套接字连接通道                     socketChannel.configureBlocking(false);                   // 配置为套接字通道为非阻塞模式                     socketChannel.register(selector, SelectionKey.OP_READ);   // 将套接字通过到注册到选择器，关注 READ 事件                 }else if(key.isReadable()){                        // 选择键的事件是 READ                     StringBuilder sb = new StringBuilder();                     if(key.channel() instanceof DatagramChannel){  // 选择的通道为数据报通道，客户端是通过 UDP 连接过来的                         sb.append("UDP Client: ");                         datagramChannel.receive(buf);              // 最多读取 1024 字节，数据报多出的部分自动丢弃                         buf.flip();                         while(buf.position() &lt; buf.limit()) {                             sb.append((char)buf.get());                         }                         buf.clear();                     }else{                                          // 选择的通道为套接字通道，客户端时通过 TCP 连接过来的                         sb.append("TCP Client: ");                         ReadableByteChannel channel = (ReadableByteChannel) key.channel(); // 获取通道                         int size;                         while ( (size = channel.read(buf))&gt;0){                             buf.flip();                             while (buf.position() &lt; buf.limit()) {                                 sb.append((char)buf.get());                             }                             buf.clear();                         }                          if (size == -1) {                             sb.append("Exit");                             channel.close();                         }                     }                     System.out.println(sb);                 }             }             keys.clear();  // 将选择键清空，防止下次循环时被重复处理         }     } } </code></pre> <h3 id="52-tcp-客户端">5.2 TCP 客户端</h3> <pre><code class="language-java">public class TcpClient {      public static void main(String[] args) throws IOException {          Selector selector = Selector.open();          SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("localhost", 9090));         socketChannel.configureBlocking(false);         socketChannel.register(selector, SelectionKey.OP_WRITE);          Scanner scanner = new Scanner(System.in);         String line;         ByteBuffer buf = ByteBuffer.allocate(1024);          while (selector.select() &gt; 0){             Set&lt;SelectionKey&gt; keys = selector.selectedKeys();             for(SelectionKey key : keys){                 if(key.isWritable()){                     if("Bye".equals( (line = scanner.nextLine()) )){                         socketChannel.shutdownOutput();                         socketChannel.close();                         break;                     }                     buf.put(line.getBytes());                     buf.flip();                     socketChannel.write(buf);                     buf.compact();                 }             }             keys.clear();             if(!socketChannel.isOpen()) break;         }     } } </code></pre> <h3 id="53-udp-客户端">5.3 UDP 客户端</h3> <pre><code class="language-java">public class UdpClient {      public static void main(String[] args) throws IOException {         Selector selector = Selector.open();                        // 获取选择器         DatagramChannel datagramChannel = DatagramChannel.open();   // 打开一个数据报通道         datagramChannel.configureBlocking(false);                   // 配置通道为非阻塞模式         datagramChannel.register(selector, SelectionKey.OP_WRITE);  // 将通道的写事件注册到选择器         ByteBuffer buff = ByteBuffer.allocate(1024);                // 分配字节缓冲区         Scanner scanner = new Scanner(System.in);                   // 创建扫描器，扫描控制台输入流         InetSocketAddress server = new InetSocketAddress("localhost", 9090);         while (selector.select() &gt; 0){                              // 有就绪事件             Set&lt;SelectionKey&gt; keys = selector.selectedKeys();       // 获取选择键，即就绪的事件             for(SelectionKey key : keys){                           // 遍历选择键                 if(key.isWritable()){                               // 如果当前选择键是读就绪                     String line;                     if("Bye".equals( line = scanner.nextLine() )) { // 从控制台获取 1 行输入，并检查输入的是不是 Bye                         System.exit(0);                 // 正常退出                     }                     buff.put(line.getBytes());          // 放入缓冲区                     buff.flip();                        // 将缓冲区置为读状态                     datagramChannel.send(buff, server); // 往 I/O 写数据                     buff.compact();                     // 压缩缓冲区，保留没发送完的数据                 }             }             keys.clear();         }     } } </code></pre> <h2 id="6-小结">6. 小结</h2> <p>Selector 作为多路复用 I/O 模型的核心组件，能够同时监控多路 I/O 通道。选择器在 select 就绪事件地时候会阻塞，在处理 I/O 事件的时候也会阻塞，它的优势在于在阻塞的时候可以等待多路 I/O 就绪，是一种异步阻塞 I/O 模型。与多线程处理多路 I/O 相比，多路复用模型只需要单个线程即可处理万级连接，没有线程切换的开销。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-42539.htm">Java开发日志EasyExcel自定义类型转换、Excel表头字段问题</a></p>
                                        <p>下一个：<a href="/news/article-43038.htm">湖北宠物店城管打人（宠物店举报电话多少）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-48962.htm" title="动物疫苗预防控制中心电话（动物防疫站电话号码多少）">动物疫苗预防控制中心电话（动物防疫站电话号码多少）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-free-clash-subscribe.htm" title="「1月7日」最高速度22.5M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接">「1月7日」最高速度22.5M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-19-free-shadowrocket-node.htm" title="「12月19日」最高速度18M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接">「12月19日」最高速度18M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-15-free-node-subscribe.htm" title="「11月15日」最高速度18.4M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「11月15日」最高速度18.4M/S，2024年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-27136.htm" title="python基础知识-pycharm版 第七天">python基础知识-pycharm版 第七天</a></li>
                        <li class="py-2"><a href="/news/article-38580.htm" title="Android Studio计算器 app">Android Studio计算器 app</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-20-free-node-subscribe-links.htm" title="「11月20日」最高速度22M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接">「11月20日」最高速度22M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-28531.htm" title="猫咪三针疫苗间隔多久打第三针疫苗（猫咪的三针疫苗要相隔多久）">猫咪三针疫苗间隔多久打第三针疫苗（猫咪的三针疫苗要相隔多久）</a></li>
                        <li class="py-2"><a href="/news/article-20207.htm" title="动物疫苗注射的途径有哪些（动物疫苗接种方法）">动物疫苗注射的途径有哪些（动物疫苗接种方法）</a></li>
                        <li class="py-2"><a href="/news/article-33289.htm" title="宠物粮食批发厂家价格表大全及图片（宠物粮食批发网站）">宠物粮食批发厂家价格表大全及图片（宠物粮食批发网站）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container footer-bottom clearfix">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                V2rayClashNode节点订阅站 版权所有
                <br />
                Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/v2rayclashnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/v2rayclashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>